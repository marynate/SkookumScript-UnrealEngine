// Select code & press F4 to execute it (or Shift+F4 to execute locally on IDE).
// Or drag & drop a .sk script file here to execute it.

// === Unfamiliar with SkookumScript? ===
// Take a moment and read through these examples illustrating some basic concepts of SkookumScript.

// ========================================
// === 1) Core SkookumScript Principles ===
// ========================================

// Select this expression (or just have the caret on the line)
// and hit F4 (to evaluate on game runtime) or Shift+F4 to evaluate locally on the IDE:
4 + 5

// Do the same with any of these:
3.0 + 4.5
[2 + 2] = 4 // SkookumScript has no operator precedence! Use [square] brackets to group sub-expressions
6 < 4
7 ~= 8 // Not equal

// Variables!
// The exclamation mark ! indicates that something “new” is being created in SkookumScript
!bob : 9 // creates the variable 'bob' and binds it to the Integer 9, bob now has the type Integer
bob := 7 // re-assigns the value 7 to bob, bob stays an Integer
bob : "Hello World!" // re-binds bob to "Hello World!" - bob changed type and is now a String!

// Randomness and types
// SkookumScript is a strongly typed language, BUT variables can have multiple possible types!
// The compiler will remember the possible types a variable can have, and make sure all types are always compatible
!var: if @@random.coin_toss [42] else ["stuff"] // The type of var is now <Integer|String>

// Lists of stuff
// Note that when a method (function) takes no arguments, you can omit the parentheses
{1 2 3 4 5}.reverse                // Reverses the order of this list's elements
{1 -2 3 -4}%negate                 // Applies the method 'negate' to all elements of the list, returns the result
{1 -2 3 -4}.do[item.negate]        // Runs some code - a 'closure' - on each element of the list
{1 2 3}.do[item++ unless item = 2] // unless is short for 'if not'
{3 4 5 8}.select[item.pow2?]       // Make new list based on a selection criteria (again that code in square brackets is a closure)
{3 4 5 8}.reject[item.pow2?]       // Make new list by rejecting some elements of the original list
{"A" "B" "C" "D"}.any              // Select random element from list
{3 4 5}.any?[item.pow2?]           // Test if _any_ element from list satisfies a condition
{3 4 5}.all?[item.pow2?]           // Test if _all_ element from list satisfies a condition, false here
{2 4 8}.all?[item.pow2?]           // Same, true in this case

// Loops and control statements
4.do[println("Hello World!")] // Do something four times
if 6>9 [println("Six is greater than nine!")] // Conditional
println(if 5>4 ["Correct"] else ["Not correct"]) // if statement can be used as an expression (so can everything)
!a: 8 if a=7 [println("a is 7")] a=8 [println("a is 8")] else [println("a is neither 7 nor 8")] // "elseif"
println("Tail!") when @@random.coin_toss // when is another way of expressing a conditional
println("Head!") unless @@random.coin_toss // unless = "when not"

// Coroutines! This is the secret sauce of SkookumScript.
// IMPORTANT: The IDE must be connected to the running game for this to work when hitting F4.
// Check in the top right corner that it says "SkookumNet: Remote IDE - connected"
_wait(2) // Waits 2 seconds then returns
4._do [_wait(1) println("Tick!")] // Waits 1 second four times and prints "Tick!" after each wait
_wait(5.0 + @@random.uniform_range(0 10)) // Wait random time
_wait // Wait one simulation frame

Pawn.named("RoboChar1")._path_to_actor(player_pawn)

// ===============================
// === 2) Vector Math Examples ===
// ===============================

// SkookumScript comes with built-in vector math types
// Hit Shift+Ctrl+Tab to bring up the class browser
// Check out the classes Vector2, Vector3, Vector4, Rotation, RotationAngles, Transform, Color
Vector3!xyz(1 2 3) // Creates a 3D vector with x=1,y=2,z=3 - note that commas are not required between function arguments
Vector3!xyz(1 2 3) + Vector3!xyz(2 3 4) // Adds two vectors
Vector3.@@direction_up // A handy class constant (static data member) of Vector3
RotationAngles!yaw_pitch_roll(60 0 0) // Creates a set of Euler angles to specify a rotation
// A transform has a position, a rotation and a scale:
Transform!position_rotation_scale(Vector3!xyz(1 2 3) RotationAngles!yaw_pitch_roll(60 0 0).Rotation Vector3!xyz(1 1 1))
Color.@@yellow // We've got colors, too

// ==============================
// === 3) UE4 Engine Bindings ===
// ==============================

// Ok now let's have some fun!
// NOTE: Make sure you have the project SkookumDemo loaded and running!
// Select the code below and hit F4 multiple times!!!
Pawn.instances%_boom // Gets the list of all Pawns in the world, and runs the coroutine _boom on them

// Click on the word _boom and hit Alt-G to see how it's implemented!

// The currently active World
@@world

[not @@world.nil?] // Is the game running?

player_pawn // Get the player pawn

Actor.named("RoboChar1").transform // Get an actor by name, and find something out about it

// Play explosion sound at a given actor location
Actor.named("TargetPoint1")._play_sound("/Game/StarterContent/Audio/Explosion01.Explosion01")

// Draw text above player
player_pawn._draw_text("Play me!")

//------------------------------------------
// Send random robot to player
Enemy.instances.any._path_to_actor(player_pawn)

Enemy.instances.any._boom

// Then select and reset when complete
robo_reset  // Reset the robots

//------------------------------------------
// Have each robot path to player one after the other
// Select and run the next three lines
Pawn.named("RoboChar1")._path_to_actor(player_pawn)
Pawn.named("RoboChar2")._path_to_actor(player_pawn)
Pawn.named("RoboChar3")._path_to_actor(player_pawn)
player_pawn._boom  

// Then select and reset when complete
robo_reset  // Reset the robots
  
//------------------------------------------
// Have each robot path to player simultaneously
sync
  [
  Pawn.named("RoboChar1")._path_to_actor(player_pawn)
  Pawn.named("RoboChar2")._path_to_actor(player_pawn)
  Pawn.named("RoboChar3")._path_to_actor(player_pawn)
  ]
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
// Have each robot path to player simultaneously
// and boom player when first arrives
race
  [
  Pawn.named("RoboChar1")._path_to_actor(player_pawn)
  Pawn.named("RoboChar2")._path_to_actor(player_pawn)
  Pawn.named("RoboChar3")._path_to_actor(player_pawn)
  ]
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
// Have each robot path to player simultaneously
// and print Done! when first arrives or 2 seconds elapses
race
  [
  _wait(2)
  Pawn.named("RoboChar1")._path_to_actor(player_pawn)
  Pawn.named("RoboChar2")._path_to_actor(player_pawn)
  Pawn.named("RoboChar3")._path_to_actor(player_pawn)
  ]
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
// All robots boom simultaneously
Enemy.instances%_boom

//------------------------------------------
// All robots path to player one after the other
Enemy.instances._do[item._path_to_actor(player_pawn)]
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
// All robots path to player simultaneously
Enemy.instances%_path_to_actor(player_pawn)
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
// All robots boom one after the other
Enemy.instances._do[item._boom]

robo_reset  // Reset the robots

//------------------------------------------
// Have each robot path to player simultaneously
// and boom player when first arrives
Enemy.instances%>_path_to_actor(player_pawn)
player_pawn._boom  

robo_reset  // Reset the robots

//------------------------------------------
_sentry_duty
_sentry_duty(false)
sentry_action

robo_reset  // Reset the robots


//------------------------------------------
// Code from promo video

// All robots path to player simultaneously
Enemy.instances%_path_to_actor(player_pawn)
player_pawn._boom  

// Random robot goes boom
Enemy.instances.any._boom

robo_reset  // Reset the robots

player_pawn.transform

[3.0 + 4.5] / 3.5

_sentry_duty
_sentry_duty(false)
sentry_action

_berzerk


//------------------------------------------
// Some more random examples!
GameplayStatics.actor_array_average_location(Enemy.instances) // Get averaged location of all enemies
!actors: List{Actor}! GameplayStatics.all_actors_of_class(@@world TargetPoint.static_class actors) actors // Gets list of actors of class 'TargetPoint'


// These samples just scratch the surface of what SkookumScript can do!
// If you have questions, please ask away in our forum at
// http://forum.skookumscript.com

// Enjoy!!
// Yours Skookumly,
// The Mad Scientists at Agog Labs
