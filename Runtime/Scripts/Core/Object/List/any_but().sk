//---------------------------------------------------------------------------------------
// Gets random item from list as long as it is not `excluding`.
// Allows you to ensure previous item is not returned the next time.
//
// Params:
//   excluding: item to exclude
//   random: random number generator to use
//
// Return Params:
//   index_found: random index used
//
// Returns: random item
//
// Examples:
//   ```
//   !idx
//   !letters: {"A" "B" "C" "D"}
//   !letter:  letters.any(; idx)
//   println("letter: " letter ", random idx: " idx)
//
//   // Tell different random bad guy in list to do something
//   !guy 
//   loop
//     [
//     guy: bad_guys.any_but(guy)._do_something
//     ]
//   ```
//
// Notes:     The list must not be empty - use `any_or_nil()` if list can be empty.
// See:       any_or_nil(), at(), first(), last(), find?()
// Author(s): Conan Reis
//---------------------------------------------------------------------------------------

( <ItemClass_|None> excluding
  Random random: @@random
; Integer index_found  
) ItemClass_

  [
  !found
  
  loop
    [
    index_found: random.uniform_int(length)
    found: at(index_found)
    if not found.same?(excluding) [exit]
    ]
    
  found
  ]  